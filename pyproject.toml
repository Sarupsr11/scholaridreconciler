[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "ScholarIdReconciler"
authors = [
    {name = "Sarup Hussain", email = "saruphussain11@gmail.com"},
]
maintainers = [
    {name = "Sarup Hussain", email = "saruphussain11@gmail.com"},
]
readme = "README.md"
license= "Apache-2.0"
dependencies = [
    "pydantic",
    "click",
    "fastapi[standard]",
    "uvicorn",
    "sparqlwrapper",
    "requests",
    "graphviz",
    "rdflib",
    "typing",
    "SPARQLWrapper",
    "fuzzywuzzy",
    "pandas",
    "rapidfuzz",
    "nltk",
    "numpy==1.26.4",
    "geotext",
    "google-cloud-language",
    "transformers",
    "spacy"
]

requires-python = ">=3.10"
classifiers = [
    "Development Status :: 4 - Beta",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Operating System :: OS Independent",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Intended Audience :: Developers",
    "Intended Audience :: Education",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: Apache Software License"
]
dynamic = ["version", "description"]

[tool.hatch.version]
path = "src/scholaridreconciler/__init__.py"

[tool.my_project]
database_path = "/src/scholaridreconciler/services/.cache/db/organisation_data.db"

[project.urls]
Home = ""
Documentation = ""
Source = ""

[project.optional-dependencies]
test = [
    "tox",
    "pytest",
    "pytest-cov",
    "ruff",
    "mypy"
]

[project.scripts]
scholar-id-reconciler = "scholaridreconciler.cli:cli"

[tool.ruff]
# Set the maximum line length to 79.
line-length = 120

[tool.ruff.lint]
select = [
    # pycodestyle
    "E",
    # Pyflakes
    "F",
    # pyupgrade
    "UP",
    # flake8-bugbear
    "B",
    # flake8-simplify
    "SIM",
    # isort
    "I"
]
ignore = [
    # if-else-block-instead-of-if-exp
    "SIM108",
    # nested with statements (not working correctly with nicegui)
    "SIM117"
]
# Allow fix for all enabled rules (when `--fix`) is provided.
# fixable = ["ALL"]

[tool.ruff.format]
# Like Black, automatically detect the appropriate line ending
line-ending = "auto"

[tool.tox]
legacy_tox_ini = """
    [tox]
    env_list = lint, type, py{310,311,312}
    minversion = 4.15.0

    [testenv]
    description = run the tests with pytest
    deps = .[test]
    package = wheel
    wheel_build_env = .pkg
    allowlist_externals =
        scripts/*
        coverage
        copy
    setenv =
        DATABASE_PATH = {env:CI_PROJECT_DIR:.}/src/scholaridreconciler/services/.cache/db/organisation_data.db
    commands =
        python -c "import os; print('Temporary directory:', os.environ.get('DATABASE_PATH'))"
        pytest --junitxml=report.xml {tty:--color=yes} {posargs}



    [testenv:coverage]
    description = run test coverage
    deps =
        .[test]
    commands =
        pytest --cov --cov-append {tty:--color=yes} {posargs}
        coverage xml

    [testenv:format]
    description = install ruff and format the project code
    deps = ruff
    commands =
        ruff format

    [testenv:lint]
    description = run linters
    skip_install = true
    deps = ruff
    commands =
        ruff check --fix

    [testenv:type]
    description = run type checks
    deps = mypy>=1.1
    commands =
        mypy {posargs:src/scholaridreconciler}
"""
[tool.mypy]
follow_imports = "skip"
strict_optional = true
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = ["yaml", "dateutil.parser", "dateutil", "tabulate", "requests"]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "6.0"
testpaths = [
    "tests"
]
asyncio_mode = "auto"

[tool.datamodel-codegen]
field-constraints = true
snake-case-field = false
strip-default-none = false
target-python-version = "3.10"

[tool.black]
skip-string-normalization = true
line-length = 150